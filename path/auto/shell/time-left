#!/usr/bin/env python3
import json
import math
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional


TARGET_DATE_PATH = "~/.config/time-left/config.json"


def main():
    try:
        path = Path(TARGET_DATE_PATH).expanduser()
        with open(path) as fh:
            parsed = json.load(fh)
            target = parsed["target"]
            precision = parsed.get("precision")
    except FileNotFoundError:
        return None

    diff = time_left(target)
    if diff is None:
        sys.exit(1)

    if precision is None:
        diff = format_delta(diff)
    else:
        diff = format_delta(diff, precision)
    print(diff)


def time_left(target) -> timedelta:
    target = datetime.fromisoformat(target)
    diff = target - datetime.now()

    return diff


def format_delta(delta, precision = {"d": 1*24, "w": 7*24, "m": 30*24}) -> str:
    # want to go from coarse to fine, to make sure large sieves cover everything
    precision = sorted(
        precision.items(),
        key=lambda pair: pair[1],
        reverse=True,
    )

    # idea is to "sieve" out `delta` until the wanted precision is achieved
    # and noting down in `sieved_out` what each precision step down yielded
    sieved_out = []
    for i, (label, sieve_size) in enumerate(precision):
        sieve = timedelta(hours=sieve_size)

        sieve_result = delta // sieve
        delta %= sieve

        sieved_out.append(f"{sieve_result}{label}")

    return " ".join(sieved_out)


if __name__ == "__main__":
    main()
